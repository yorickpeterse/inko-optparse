import std.test.Tests
import optparse.lexer.(Lexer, Token)

fn lex(input: Array[String]) -> Array[Token] {
  Lexer.new(input).to_array
}

fn pub tests(t: mut Tests) {
  t.test('Lexer.next') fn (t) {
    t.equal(lex([]), [])
    t.equal(lex(['foo']), [Token.Value('foo')])
    t.equal(lex(['-h']), [Token.Short('h')])
    t.equal(lex(['-Ã©']), [Token.Short('Ã©')])
    t.equal(lex(['-ðŸ˜®']), [Token.Short('ðŸ˜®')])
    t.equal(lex(['--ðŸ˜®']), [Token.Long('ðŸ˜®')])
    t.equal(lex(['--Ã©Ã©']), [Token.Long('Ã©Ã©')])
    t.equal(lex(['--help']), [Token.Long('help')])
    t.equal(lex(['--h']), [Token.Long('h')])
    t.equal(lex(['-help']), [Token.Short('h'), Token.Value('elp')])
    t.equal(lex(['-ðŸ˜®elp']), [Token.Short('ðŸ˜®'), Token.Value('elp')])
    t.equal(lex(['-']), [Token.Value('-')])
    t.equal(lex(['-v', '-v']), [Token.Short('v'), Token.Short('v')])
    t.equal(lex(['-v', '--v']), [Token.Short('v'), Token.Long('v')])
    t.equal(lex(['-v', 'foo']), [Token.Short('v'), Token.Value('foo')])
    t.equal(
      lex(['-v', '=', 'foo']),
      [Token.Short('v'), Token.Value('='), Token.Value('foo')]
    )

    t.equal(lex(['-v=']), [Token.Short('v'), Token.Value('=')])
    t.equal(lex(['-v=foo']), [Token.Short('v'), Token.Value('=foo')])
    t.equal(lex(['-ðŸ˜®=']), [Token.Short('ðŸ˜®'), Token.Value('=')])
    t.equal(lex(['-ðŸ˜®=foo']), [Token.Short('ðŸ˜®'), Token.Value('=foo')])
    t.equal(lex(['-help=']), [Token.Short('h'), Token.Value('elp=')])
    t.equal(lex(['-help=foo']), [Token.Short('h'), Token.Value('elp=foo')])
    t.equal(lex(['-ðŸ˜®a=']), [Token.Short('ðŸ˜®'), Token.Value('a=')])
    t.equal(lex(['-ðŸ˜®a=foo']), [Token.Short('ðŸ˜®'), Token.Value('a=foo')])
    t.equal(lex(['--v=']), [Token.LongPair('v', '')])
    t.equal(lex(['--v=foo']), [Token.LongPair('v', 'foo')])
    t.equal(lex(['--ðŸ˜®=foo']), [Token.LongPair('ðŸ˜®', 'foo')])
    t.equal(lex(['-Ã©=foo']), [Token.Short('Ã©'), Token.Value('=foo')])
    t.equal(lex(['--Ã©Ã©=foo']), [Token.LongPair('Ã©Ã©', 'foo')])
    t.equal(
      lex(['-v', 'a', 'b']),
      [Token.Short('v'), Token.Value('a'), Token.Value('b')]
    )

    t.equal(
      lex(['-v', '--', '-a', 'b']),
      [Token.Short('v'), Token.Separator, Token.Value('-a'), Token.Value('b')]
    )

    t.equal(
      lex(['-v', '--', '-a=b']),
      [Token.Short('v'), Token.Separator, Token.Value('-a=b')]
    )
  }
}
